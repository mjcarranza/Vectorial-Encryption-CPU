--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_m2a
( 
	data[3..0]	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode2278w[3..0]	: WIRE;
	w_anode2295w[3..0]	: WIRE;
	w_anode2305w[3..0]	: WIRE;
	w_anode2315w[3..0]	: WIRE;
	w_anode2325w[3..0]	: WIRE;
	w_anode2335w[3..0]	: WIRE;
	w_anode2345w[3..0]	: WIRE;
	w_anode2355w[3..0]	: WIRE;
	w_anode2365w[3..0]	: WIRE;
	w_anode2376w[3..0]	: WIRE;
	w_anode2386w[3..0]	: WIRE;
	w_anode2396w[3..0]	: WIRE;
	w_anode2406w[3..0]	: WIRE;
	w_anode2416w[3..0]	: WIRE;
	w_anode2426w[3..0]	: WIRE;
	w_anode2436w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[7..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode2355w[3..3], w_anode2345w[3..3], w_anode2335w[3..3], w_anode2325w[3..3], w_anode2315w[3..3], w_anode2305w[3..3], w_anode2295w[3..3], w_anode2278w[3..3]);
	eq_wire2w[] = ( w_anode2436w[3..3], w_anode2426w[3..3], w_anode2416w[3..3], w_anode2406w[3..3], w_anode2396w[3..3], w_anode2386w[3..3], w_anode2376w[3..3], w_anode2365w[3..3]);
	w_anode2278w[] = ( (w_anode2278w[2..2] & (! data_wire[2..2])), (w_anode2278w[1..1] & (! data_wire[1..1])), (w_anode2278w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2295w[] = ( (w_anode2295w[2..2] & (! data_wire[2..2])), (w_anode2295w[1..1] & (! data_wire[1..1])), (w_anode2295w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2305w[] = ( (w_anode2305w[2..2] & (! data_wire[2..2])), (w_anode2305w[1..1] & data_wire[1..1]), (w_anode2305w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2315w[] = ( (w_anode2315w[2..2] & (! data_wire[2..2])), (w_anode2315w[1..1] & data_wire[1..1]), (w_anode2315w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2325w[] = ( (w_anode2325w[2..2] & data_wire[2..2]), (w_anode2325w[1..1] & (! data_wire[1..1])), (w_anode2325w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2335w[] = ( (w_anode2335w[2..2] & data_wire[2..2]), (w_anode2335w[1..1] & (! data_wire[1..1])), (w_anode2335w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2345w[] = ( (w_anode2345w[2..2] & data_wire[2..2]), (w_anode2345w[1..1] & data_wire[1..1]), (w_anode2345w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode2355w[] = ( (w_anode2355w[2..2] & data_wire[2..2]), (w_anode2355w[1..1] & data_wire[1..1]), (w_anode2355w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode2365w[] = ( (w_anode2365w[2..2] & (! data_wire[2..2])), (w_anode2365w[1..1] & (! data_wire[1..1])), (w_anode2365w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2376w[] = ( (w_anode2376w[2..2] & (! data_wire[2..2])), (w_anode2376w[1..1] & (! data_wire[1..1])), (w_anode2376w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2386w[] = ( (w_anode2386w[2..2] & (! data_wire[2..2])), (w_anode2386w[1..1] & data_wire[1..1]), (w_anode2386w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2396w[] = ( (w_anode2396w[2..2] & (! data_wire[2..2])), (w_anode2396w[1..1] & data_wire[1..1]), (w_anode2396w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2406w[] = ( (w_anode2406w[2..2] & data_wire[2..2]), (w_anode2406w[1..1] & (! data_wire[1..1])), (w_anode2406w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2416w[] = ( (w_anode2416w[2..2] & data_wire[2..2]), (w_anode2416w[1..1] & (! data_wire[1..1])), (w_anode2416w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2426w[] = ( (w_anode2426w[2..2] & data_wire[2..2]), (w_anode2426w[1..1] & data_wire[1..1]), (w_anode2426w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2436w[] = ( (w_anode2436w[2..2] & data_wire[2..2]), (w_anode2436w[1..1] & data_wire[1..1]), (w_anode2436w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
